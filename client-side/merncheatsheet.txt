Server Side


Create:   package.json - express
                         nodemon
                         mongoose
                         .env
                         bcrypt.js
                        

App.js:         Creating Multiple Pages.
                Adding  Middleware
                Connect mongoose

Mongodb Atlas:  Setup and Create free cluster
                Click Documents                                      --        --                                    -
                Connect free app and which you get link| link to app.js - mongodb+srv://<username>:<password>@cluster0.9g6d1dz.mongodb.net/?retryWrites=true&w=majority
                Network Access - Add Ip and Select ip which you can get anywhere

Id - marufdb 
Password - maruf123
Project name = mernstack


.envfile: 
          Install package 
          Create .env file and add in git ignore folder 
          and Setup



 db:     connect.js 
 model:  userSchema - Schmas and Models

 router: auth.js - make routes for registration and use of postman for userdata (use middleware of express.json)
                   store data to mongodb:
                   SignUp
                   SignIn


bcrypt.js - For securing and hashing password 

                 Applying: on before (.save) save function in Mongodb 
                 install bcryptjs : import ( userSchema.js)
                 hashing the password

Encryption : Encoding ----> Decoding (Two way | we can decode value to encoding used by the online tool. It is not safe)
             Maruf           aomso
 
Hashing    : Maruf ----> jdhuwdn2892wnkbk2e89chi90ucd (One way | we cannot decode value to encoding used by value. It is safe)


jwt: Json Web Token. for generating cookies and tokens

auth.js - require
          jwt
          session expired in jwt

userSchema : require
             schema
             generating token
             


Client Side


ReactJS:  create app - npx create-react-app client
          start app  - npm start        


package json: npm flowbite-react
              npm React router dom
            
Setup : tailwind and flowbite react

Create components :

React router dom : v6

 index.js    import + browserrouter
 app.js      import + wrap page 
 Navbar.js - import + <NavLink> Replace <a> and <href> Replace <to>



*Store Data in FrontEnd using React Hooks

Send Data to backend using Fetch Api
Button : Onclick


*Store Data to Frontend to Backend & Solve React Cors Error

*Store Data to all components Frontend to Backend.

How to run and share Mern Stack App.

*Deploy MernStack App In Heroku.


// Send data to backend using Fetch Api
  const PostData = async (e) => {
    e.preventDefault()

    const { name, email, phone, work, password, cpassword } = user
  }

  onClick={PostData}
  form method="POST"
